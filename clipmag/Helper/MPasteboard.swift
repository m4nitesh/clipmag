//
//  MPasteboard.swift
//  clipmag
//
//  Created by Nitesh Kumar on 25/04/21.
//

import Foundation

import AppKit

class Clipboard {
    
    private let pasteboard = NSPasteboard.general
    private let timerInterval = 1.0
    
    // See http://nspasteboard.org for more details.
    private let ignoredTypes: Set = [
        "org.nspasteboard.TransientType",
        "org.nspasteboard.ConcealedType",
        "org.nspasteboard.AutoGeneratedType"
    ]
    
    private var changeCount: Int
    
    private let supportedTypes: Set = [
        NSPasteboard.PasteboardType.fileURL,
        NSPasteboard.PasteboardType.png,
        NSPasteboard.PasteboardType.string,
        NSPasteboard.PasteboardType.tiff
    ]
    private var enabledTypes: Set<NSPasteboard.PasteboardType> { UserDefaults.standard.enabledPasteboardTypes }
    private var disabledTypes: Set<NSPasteboard.PasteboardType> { supportedTypes.subtracting(enabledTypes) }
    
    private var accessibilityAllowed: Bool { AXIsProcessTrustedWithOptions(nil) }
    
    private var frontmostApp: (name: String, bundle: String, icon: NSImage)?
    
    
    init() {
        changeCount = pasteboard.changeCount
    }
    
    
    func startListening() {
        
        NSWorkspace.shared.notificationCenter.addObserver(self, selector: #selector(activeApp(sender:)), name: NSWorkspace.didActivateApplicationNotification, object: nil)
        
        Timer.scheduledTimer(timeInterval: timerInterval,
                             target: self,
                             selector: #selector(checkForChangesInPasteboard),
                             userInfo: nil,
                             repeats: true)
        
        
    }
    
    @objc
    private func activeApp(sender: NSNotification) {
        if let info = sender.userInfo,
           let content = info[NSWorkspace.applicationUserInfoKey] as? NSRunningApplication,
           let name = content.localizedName,
           let bundle = content.bundleIdentifier,
           let icon = content.icon
        {
            frontmostApp = (name: name, bundle: bundle, icon: icon)
        }
    }
    
    @objc
    func checkForChangesInPasteboard() {
        guard pasteboard.changeCount != changeCount else {
            return
        }
        
        if let text: String = pasteboard.pasteboardItems?.first?.string(forType: .string) {
            let type: String = frontmostApp?.bundle ?? ""
            if (!isEmptyString(text)) {
                _ = PersistenceController.shared.updateOrInsertItem(text: text.trimmingCharacters(in: .whitespacesAndNewlines), type: type)
            }
            print(text, type);
        }
        
        changeCount = pasteboard.changeCount
    }
    
    func copy(_ item: Task) {
        pasteboard.clearContents()
        if ((item.content) != nil) {
            pasteboard.setString(item.content!, forType: NSPasteboard.PasteboardType.string)
        }
        NSApp.hide(nil)
        paste()
    }
    
    func paste() {
        let event1 = CGEvent(keyboardEventSource: nil, virtualKey: 0x09, keyDown: true); // cmd-v down
        event1?.flags = CGEventFlags.maskCommand;
        event1?.post(tap: CGEventTapLocation.cghidEventTap);
        
        let event2 = CGEvent(keyboardEventSource: nil, virtualKey: 0x09, keyDown: false) // cmd-v up
        //event2?.flags = CGEventFlags.maskCommand
        event2?.post(tap: CGEventTapLocation.cghidEventTap)
    }
    
    
    private func isEmptyString(_ str: String) -> Bool {
        
        return str.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    private func shouldIgnore(_ types: Set<NSPasteboard.PasteboardType>) -> Bool {
        let ignoredTypes = self.ignoredTypes
            .union(UserDefaults.standard.ignoredPasteboardTypes)
            .map({ NSPasteboard.PasteboardType($0) })
        return types.isDisjoint(with: enabledTypes) ||
            !types.isDisjoint(with: ignoredTypes)
    }
    
    
}

